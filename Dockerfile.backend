# ==============================================================================
# Production-Ready FastAPI Backend Dockerfile for Railway
# ==============================================================================
# Stage 1: Build dependencies (separate layer for caching)
# Stage 2: Runtime - minimal final image
# Optimized for: Fast builds, small size, Railway $PORT compatibility
# ==============================================================================

# ------------------------------------------------------------------------------
# STAGE 1: Dependencies Builder
# ------------------------------------------------------------------------------
FROM python:3.12-slim AS builder

# Install system dependencies required for Python packages + OpenCV
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    g++ \
    libpq-dev \
    libgl1-mesa-glx \
    libglib2.0-0 \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment for isolated dependencies
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy only requirements first (maximizes Docker layer cache)
COPY backend/requirements.txt /tmp/requirements.txt

# Install Python dependencies in virtual environment
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r /tmp/requirements.txt

# ------------------------------------------------------------------------------
# STAGE 2: Runtime (Production)
# ------------------------------------------------------------------------------
FROM python:3.12-slim

# Install runtime dependencies (PostgreSQL + OpenCV + Tesseract)
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq5 \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    tesseract-ocr \
    tesseract-ocr-ara \
    && rm -rf /var/lib/apt/lists/*

# Copy virtual environment from builder stage
COPY --from=builder /opt/venv /opt/venv

# Set environment variables
ENV PATH="/opt/venv/bin:$PATH" \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONPATH=/app

# Set working directory
WORKDIR /app

# Copy Python entrypoint script (more reliable than shell)
COPY docker-entrypoint.py /usr/local/bin/docker-entrypoint.py
RUN chmod +x /usr/local/bin/docker-entrypoint.py

# Copy application code
COPY backend/ ./backend/

# Create non-root user for security
RUN useradd -m -u 1000 appuser && chown -R appuser:appuser /app
USER appuser

# Expose default port (Railway will override with $PORT)
EXPOSE 8000

# Python entrypoint for reliable PORT handling
ENTRYPOINT ["python3", "/usr/local/bin/docker-entrypoint.py"]
